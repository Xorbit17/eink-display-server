# Generated by Django 5.2.6 on 2025-09-09 08:28

import dashboard.constants
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setup_completed', models.BooleanField(default=False, help_text='True if user completed the wizard')),
                ('discovery_port', models.PositiveIntegerField(default=51234, help_text='UDP port for device discovery.')),
                ('openai_key', models.CharField(default=None, help_text='OpenAI API key.', max_length=255, null=True)),
                ('openweathermap_key', models.CharField(default=None, help_text='OpenWeatherMap API key.', max_length=255, null=True)),
                ('image_art_generation_model', models.CharField(default='gpt-5', help_text='Model for art generation.', max_length=128)),
                ('image_classification_model', models.CharField(default='gpt-5', help_text='Model for image classification.', max_length=128)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Artstyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('pre_pipeline', models.JSONField(default=dict)),
                ('post_pipeline', models.JSONField(default=dict)),
                ('generator_prompt', models.TextField()),
                ('score', models.FloatField(default=0.5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CalendarSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('ics_url', models.URLField()),
                ('timezone', models.CharField(default='Europe/Brussels', max_length=64)),
                ('active', models.BooleanField(default=True)),
                ('last_synced', models.DateTimeField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('classifier_prompt', models.TextField()),
                ('generator_prompt', models.TextField()),
                ('score', models.FloatField(default=0.5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('job_function_name', models.CharField(max_length=64)),
                ('job_type', models.CharField(choices=[('CRON', 'Triggered by chron'), ('MANUAL', 'Triggered manually')], max_length=64)),
                ('cron', models.CharField(help_text="Cron format, e.g. '0 5 * * *'", max_length=64, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('enabled', models.BooleanField(default=True)),
                ('params', models.JSONField(blank=True, default=dict)),
                ('last_run_started_at', models.DateTimeField(blank=True, null=True)),
                ('last_run_finished_at', models.DateTimeField(blank=True, null=True)),
                ('last_run_status', models.CharField(choices=[('RUNNING', 'Running'), ('SUCCESS', 'Success'), ('SKIPPED', 'Skipped'), ('ERROR', 'Error'), ('QUEUED', 'Queued')], max_length=64, null=True)),
                ('last_run_message', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('latitude', models.CharField(max_length=20)),
                ('longitude', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='MinuteSystemSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.DateTimeField(db_index=True, unique=True)),
                ('cpu_percent_avg', models.FloatField()),
                ('mem_total', models.BigIntegerField()),
                ('mem_used_avg', models.BigIntegerField()),
                ('mem_available_avg', models.BigIntegerField()),
                ('swap_total', models.BigIntegerField(null=True)),
                ('swap_used_avg', models.BigIntegerField(null=True)),
                ('rx_bps_avg', models.FloatField(null=True)),
                ('tx_bps_avg', models.FloatField(null=True)),
            ],
            options={
                'ordering': ['-minute'],
            },
        ),
        migrations.CreateModel(
            name='PrerenderedDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SourceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('classification', models.JSONField(default=None, null=True)),
                ('score', models.FloatField(default=0.5)),
                ('favorite', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ArtstyleContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('art_style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.artstyle')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Display',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(help_text="How the server reaches the device, e.g. 'http://hallway-pi:8080' or 'http://192.168.1.52:8080'", max_length=255)),
                ('hardware_id', models.CharField(max_length=255, unique=True)),
                ('human_readable_id', models.CharField(max_length=16, unique=True)),
                ('timezone', models.CharField(default='Europe/Brussels', max_length=64)),
                ('default_mode', models.CharField(choices=[('news', 'Newspaper'), ('photo', 'Photo'), ('dashboard', 'Dashboard')], default=dashboard.constants.Mode['PHOTO'], max_length=16)),
                ('override_mode', models.CharField(choices=[('news', 'Newspaper'), ('photo', 'Photo'), ('dashboard', 'Dashboard')], default=None, max_length=16, null=True)),
                ('last_seen', models.DateTimeField(null=True)),
                ('x_res', models.PositiveIntegerField()),
                ('y_res', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='display', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Display',
                'verbose_name_plural': 'Displays',
            },
        ),
        migrations.CreateModel(
            name='Execution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(default=None, null=True)),
                ('finished_at', models.DateTimeField(default=None, null=True)),
                ('runtime_ms', models.PositiveIntegerField(default=None, null=True)),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('SUCCESS', 'Success'), ('SKIPPED', 'Skipped'), ('ERROR', 'Error'), ('QUEUED', 'Queued')], max_length=20)),
                ('summary', models.CharField(blank=True, default='', max_length=500)),
                ('error', models.TextField(blank=True, default='')),
                ('params', models.JSONField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='dashboard.job')),
            ],
        ),
        migrations.CreateModel(
            name='JobLogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARN', 'Warning'), ('ERROR', 'Error')], db_index=True, default=dashboard.constants.LogLevel['INFO'], max_length=10)),
                ('message', models.TextField()),
                ('context', models.JSONField(default=None, null=True)),
                ('seq', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='dashboard.execution')),
            ],
        ),
        migrations.CreateModel(
            name='DayForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True)),
                ('generated_at', models.DateTimeField(db_index=True)),
                ('temp_day', models.FloatField()),
                ('temp_min', models.FloatField()),
                ('temp_max', models.FloatField()),
                ('temp_night', models.FloatField()),
                ('temp_eve', models.FloatField()),
                ('temp_morn', models.FloatField()),
                ('feels_day', models.FloatField()),
                ('feels_night', models.FloatField()),
                ('feels_eve', models.FloatField()),
                ('feels_morn', models.FloatField()),
                ('pressure', models.IntegerField()),
                ('humidity', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('dew_point', models.FloatField()),
                ('wind_speed', models.FloatField()),
                ('wind_deg', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('wind_gust', models.FloatField(blank=True, null=True)),
                ('clouds', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('uvi', models.FloatField()),
                ('precipitation_probability', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('rain', models.FloatField(blank=True, null=True)),
                ('snow', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.location')),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField(default=None, null=True)),
                ('art_style', models.CharField(max_length=64)),
                ('score', models.FloatField(default=0.5)),
                ('source_quality', models.CharField(choices=[('NOT_SUITED', 'Not suited'), ('BAD', 'Bad'), ('PASSABLE', 'Passable'), ('GOOD', 'Good'), ('VERY_GOOD', 'Very good')])),
                ('content_type', models.CharField(max_length=64)),
                ('photorealist', models.BooleanField()),
                ('favorite', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variants', to='dashboard.sourceimage')),
            ],
        ),
        migrations.CreateModel(
            name='WeatherDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weather_id', models.IntegerField(blank=True, null=True)),
                ('main_type', models.CharField(max_length=40)),
                ('description', models.CharField(blank=True, max_length=120)),
                ('day_forecast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_details', to='dashboard.dayforecast')),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Mon'), (1, 'Tue'), (2, 'Wed'), (3, 'Thu'), (4, 'Fri'), (5, 'Sat'), (6, 'Sun')])),
                ('start_time', models.TimeField(help_text='Inclusive local start')),
                ('end_time', models.TimeField(help_text="Exclusive local end; use 00:00 for 'until midnight'")),
                ('mode', models.CharField(choices=[('news', 'Newspaper'), ('photo', 'Photo'), ('dashboard', 'Dashboard')], default=dashboard.constants.Mode['PHOTO'], max_length=16)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('display', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_rules', to='dashboard.display')),
            ],
            options={
                'verbose_name': 'Weekly Rule',
                'verbose_name_plural': 'Weekly Rules',
                'ordering': ['display', 'weekday', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='CalendarOccurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(max_length=255)),
                ('instance_start', models.DateTimeField(db_index=True)),
                ('instance_end', models.DateTimeField(blank=True, null=True)),
                ('all_day', models.BooleanField(default=False)),
                ('summary', models.CharField(blank=True, max_length=500)),
                ('location', models.CharField(default=None, max_length=500, null=True)),
                ('description', models.TextField(default='No description')),
                ('canceled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='occurrences', to='dashboard.calendarsource')),
            ],
            options={
                'indexes': [models.Index(fields=['source', 'instance_start'], name='dashboard_c_source__fc2728_idx'), models.Index(fields=['instance_start'], name='dashboard_c_instanc_7824d4_idx')],
                'unique_together': {('source', 'uid', 'instance_start')},
            },
        ),
        migrations.AddIndex(
            model_name='dayforecast',
            index=models.Index(fields=['location', 'date'], name='dashboard_d_locatio_828525_idx'),
        ),
        migrations.AddConstraint(
            model_name='dayforecast',
            constraint=models.UniqueConstraint(fields=('location', 'date', 'generated_at'), name='uniq_day_forecast_per_run'),
        ),
        migrations.AddIndex(
            model_name='weeklyrule',
            index=models.Index(fields=['display', 'weekday', 'active'], name='dashboard_w_display_ba924e_idx'),
        ),
    ]
